1. when you install the git, then input the content in the commandline:
	$ git config --global user.name "your name"
	$ git config --global user.email "your email"
	note: git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。

2. Create the repository
	$ mkdir learngit
	$ cd learngit
	$ pwd
	note:如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。

	第二步，通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
	瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository,如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
	note:使用Windows的童鞋要特别注意：千万不要使用Windows自带的记事本编辑任何文本文件。
	初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit -m ""，完成。

3.
	git status命令可以让我们时刻掌握仓库当前的状态
	git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个“distributed”单词。
	$ git diff readme.txt
	小结:要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
4.
	在Git中，我们用git log命令查看历史记录.
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
	首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

	现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：
	$ git reset --hard HEAD^
	最新的那个版本append GPL已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？

	办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是3628164...，于是就可以指定回到未来的某个版本：
	$git reset --hard 3628164
	现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？

	在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
	$ git reflog
	现在总结一下：

	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

